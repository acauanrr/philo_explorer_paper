#!/usr/bin/env python3
"""
Script de teste para o pipeline completo de embeddings e matriz de dist√¢ncias
Demonstra a capacidade sem√¢ntica do sistema
"""

import requests
import json
import numpy as np
from typing import List, Dict

BASE_URL = "http://localhost:8001"

def test_distance_matrix():
    """Testa o endpoint de matriz de dist√¢ncias com textos semanticamente relacionados"""

    print("üß™ Testando Pipeline de Matriz de Dist√¢ncias Sem√¢nticas")
    print("=" * 60)

    # Textos de teste com grupos sem√¢nticos claros
    test_documents = [
        # Grupo 1: Realeza/Lideran√ßa
        {"id": "doc1", "content": "O rei governou o reino com sabedoria e justi√ßa durante d√©cadas"},
        {"id": "doc2", "content": "O monarca administrou o pa√≠s com intelig√™ncia e benevol√™ncia"},
        {"id": "doc3", "content": "A rainha liderou a na√ß√£o com coragem em tempos dif√≠ceis"},

        # Grupo 2: Animais
        {"id": "doc4", "content": "O gato subiu na √°rvore para ca√ßar p√°ssaros no jardim"},
        {"id": "doc5", "content": "O cachorro correu pelo parque perseguindo uma bola"},

        # Grupo 3: Tecnologia
        {"id": "doc6", "content": "O computador processou os dados usando algoritmos de machine learning"},
        {"id": "doc7", "content": "A intelig√™ncia artificial analisou as informa√ß√µes com redes neurais"},
    ]

    # Fazer requisi√ß√£o
    response = requests.post(
        f"{BASE_URL}/api/v1/distancematrix",
        json={
            "documents": test_documents,
            "preprocess": True,
            "distance_metric": "cosine"
        }
    )

    if response.status_code == 200:
        result = response.json()

        print("\n‚úÖ Matriz de Dist√¢ncias Gerada com Sucesso!")
        print(f"\nüìä Informa√ß√µes do Modelo:")
        print(f"   - Modelo: {result['model_used']}")
        print(f"   - Dimens√£o dos Embeddings: {result['embedding_dimension']}")
        print(f"   - Pr√©-processamento: {result['preprocessing_applied']}")
        print(f"   - M√©trica: {result['distance_metric']}")

        print(f"\nüìù Documentos Processados:")
        for i, (doc_id, label) in enumerate(zip(result['document_ids'], result['labels'])):
            print(f"   {i+1}. [{doc_id}] {label}")

        # Analisar dist√¢ncias
        matrix = np.array(result['distance_matrix'])

        print(f"\nüîç An√°lise Sem√¢ntica das Dist√¢ncias:")
        print("-" * 40)

        # Grupos esperados
        groups = {
            "Realeza": [0, 1, 2],
            "Animais": [3, 4],
            "Tecnologia": [5, 6]
        }

        # Verificar coes√£o intra-grupo
        for group_name, indices in groups.items():
            if len(indices) > 1:
                group_distances = []
                for i in range(len(indices)):
                    for j in range(i+1, len(indices)):
                        dist = matrix[indices[i]][indices[j]]
                        group_distances.append(dist)

                avg_distance = np.mean(group_distances) if group_distances else 0
                print(f"\n   Grupo '{group_name}':")
                print(f"   Dist√¢ncia m√©dia intra-grupo: {avg_distance:.3f}")

                # Verificar qualidade sem√¢ntica
                if avg_distance < 0.5:
                    print(f"   ‚úÖ Excelente coes√£o sem√¢ntica!")
                elif avg_distance < 0.7:
                    print(f"   ‚ö†Ô∏è Boa coes√£o sem√¢ntica")
                else:
                    print(f"   ‚ùå Baixa coes√£o sem√¢ntica")

        # Verificar separa√ß√£o inter-grupos
        print(f"\n   Dist√¢ncias Inter-grupos:")
        realeza_animal = matrix[0][3]  # rei vs gato
        realeza_tech = matrix[0][5]     # rei vs computador
        animal_tech = matrix[3][5]      # gato vs computador

        print(f"   Realeza ‚Üî Animais: {realeza_animal:.3f}")
        print(f"   Realeza ‚Üî Tecnologia: {realeza_tech:.3f}")
        print(f"   Animais ‚Üî Tecnologia: {animal_tech:.3f}")

        # Verificar se os grupos est√£o bem separados
        min_inter_distance = min(realeza_animal, realeza_tech, animal_tech)
        if min_inter_distance > 0.7:
            print(f"\n   ‚úÖ Excelente separa√ß√£o entre grupos sem√¢nticos!")
        else:
            print(f"\n   ‚ö†Ô∏è Grupos sem√¢nticos parcialmente separados")

        return True
    else:
        print(f"\n‚ùå Erro: {response.status_code}")
        print(response.text)
        return False

def test_embeddings():
    """Testa o endpoint de gera√ß√£o de embeddings"""

    print("\n\nüß™ Testando Gera√ß√£o de Embeddings")
    print("=" * 60)

    # Palavras semanticamente relacionadas
    test_texts = [
        "rei",
        "monarca",
        "imperador",
        "gato",
        "felino",
        "computador"
    ]

    response = requests.post(
        f"{BASE_URL}/api/v1/embeddings",
        json={
            "texts": test_texts,
            "preprocess": False
        }
    )

    if response.status_code == 200:
        result = response.json()

        print("\n‚úÖ Embeddings Gerados com Sucesso!")
        print(f"\nüìä Informa√ß√µes:")
        print(f"   - Modelo: {result['model_used']}")
        print(f"   - Dimens√£o: {result['dimension']}")
        print(f"   - Textos processados: {len(test_texts)}")

        # Calcular similaridades
        embeddings = np.array(result['embeddings'])

        print(f"\nüîç An√°lise de Similaridade Sem√¢ntica:")
        print("-" * 40)

        # Calcular similaridade cosseno entre pares espec√≠ficos
        def cosine_similarity(v1, v2):
            return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))

        pairs_to_check = [
            (0, 1, "rei", "monarca"),      # Devem ser muito similares
            (0, 2, "rei", "imperador"),    # Devem ser muito similares
            (3, 4, "gato", "felino"),       # Devem ser muito similares
            (0, 3, "rei", "gato"),          # Devem ser diferentes
            (0, 5, "rei", "computador"),    # Devem ser diferentes
        ]

        for i, j, word1, word2 in pairs_to_check:
            sim = cosine_similarity(embeddings[i], embeddings[j])
            print(f"\n   '{word1}' ‚Üî '{word2}':")
            print(f"   Similaridade: {sim:.3f}")

            if sim > 0.7:
                print(f"   ‚úÖ Alta similaridade sem√¢ntica")
            elif sim > 0.4:
                print(f"   ‚ö†Ô∏è Similaridade m√©dia")
            else:
                print(f"   ‚ùå Baixa similaridade (como esperado para conceitos diferentes)")

        return True
    else:
        print(f"\n‚ùå Erro: {response.status_code}")
        print(response.text)
        return False

def test_preprocessing():
    """Testa o endpoint de pr√©-processamento"""

    print("\n\nüß™ Testando Pr√©-processamento de Texto")
    print("=" * 60)

    test_texts = [
        "<p>Este √© um TEXTO com HTML!</p>",
        "Texto   com    espa√ßos     extras",
        "O rei governou o reino com sabedoria e justi√ßa"
    ]

    response = requests.post(
        f"{BASE_URL}/api/v1/preprocess",
        json=test_texts
    )

    if response.status_code == 200:
        result = response.json()

        print("\n‚úÖ Pr√©-processamento Executado!")
        print(f"\nüìù Configura√ß√£o:")
        config = result['config']
        for key, value in config.items():
            print(f"   - {key}: {value}")

        print(f"\nüîÑ Transforma√ß√µes:")
        for original, processed in zip(result['original_texts'], result['processed_texts']):
            print(f"\n   Original:  '{original}'")
            print(f"   Processado: '{processed}'")

        return True
    else:
        print(f"\n‚ùå Erro: {response.status_code}")
        print(response.text)
        return False

def main():
    """Executa todos os testes"""

    print("üöÄ TESTE COMPLETO DO PIPELINE DE EMBEDDINGS SEM√ÇNTICOS")
    print("=" * 70)
    print("Backend: http://localhost:8001")
    print("=" * 70)

    # Verificar se o servidor est√° rodando
    try:
        health = requests.get(f"{BASE_URL}/health").json()
        if not health['ml_service_ready']:
            print("‚ùå Servi√ßo ML n√£o est√° pronto!")
            return
        print(f"‚úÖ Servidor rodando - Vers√£o {health['version']}")
    except:
        print("‚ùå Servidor n√£o est√° respondendo em http://localhost:8001")
        return

    # Executar testes
    tests = [
        test_distance_matrix,
        test_embeddings,
        test_preprocessing
    ]

    results = []
    for test in tests:
        results.append(test())

    # Resumo final
    print("\n\n" + "=" * 70)
    print("üìä RESUMO DOS TESTES")
    print("=" * 70)

    passed = sum(results)
    total = len(results)

    if passed == total:
        print(f"‚úÖ TODOS OS TESTES PASSARAM! ({passed}/{total})")
    else:
        print(f"‚ö†Ô∏è {passed}/{total} testes passaram")

    print("\nüí° O pipeline est√° usando embeddings sem√¢nticos de √∫ltima gera√ß√£o!")
    print("   Isso significa que o sistema entende o SIGNIFICADO dos textos,")
    print("   n√£o apenas palavras-chave, resultando em √°rvores filogen√©ticas")
    print("   muito mais precisas e significativas!")

if __name__ == "__main__":
    main()